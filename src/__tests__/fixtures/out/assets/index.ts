/***********************************************/
/*                                             */
/*   This file was generated by as script.     */
/*  DO NOT EDIT manually as any changes will   */
/*               be overwritten.               */
/*                                             */
/***********************************************/
import loadMarkdown from "../../dummy-loader";

export const contents = [
  {
    sourceLocation: `content/guide_tags/animals.en.md`,
    collection: `guideTags`,
    slug: `animals`,
    locale: `en`,
    props: { title: `Animals` },
    raw: null,
  },
  {
    sourceLocation: `content/guide_tags/animals.fr.md`,
    collection: `guideTags`,
    slug: `animals`,
    locale: `fr`,
    props: { title: `Animaux` },
    raw: null,
  },
  {
    sourceLocation: `content/guide_tags/animals.pt.md`,
    collection: `guideTags`,
    slug: `animals`,
    locale: `pt`,
    props: { title: `Animais` },
    raw: null,
  },
  {
    sourceLocation: `content/guide_tags/plants.en.md`,
    collection: `guideTags`,
    slug: `plants`,
    locale: `en`,
    props: { title: `Plants` },
    raw: null,
  },
  {
    sourceLocation: `content/guide_tags/plants.fr.md`,
    collection: `guideTags`,
    slug: `plants`,
    locale: `fr`,
    props: { title: `Plantes` },
    raw: null,
  },
  {
    sourceLocation: `content/guide_tags/plants.pt.md`,
    collection: `guideTags`,
    slug: `plants`,
    locale: `pt`,
    props: { title: `Plantas` },
    raw: null,
  },
  {
    sourceLocation: `content/guides/about-animals-and-plants.en.md`,
    collection: `guides`,
    slug: `about-animals-and-plants`,
    locale: `en`,
    props: {
      title: `About animals and plants`,
      Body: loadMarkdown(
        () => import(`./guides/about-animals-and-plants/en/root/body/body.md`),
      ),
      guideTags: [`animals`, `plants`],
    },
    raw: null,
  },
  {
    sourceLocation: `content/guides/about-animals-and-plants.fr.md`,
    collection: `guides`,
    slug: `about-animals-and-plants`,
    locale: `fr`,
    props: {
      title: `\u00C0 propos d'animaux et de plantes`,
      Body: loadMarkdown(
        () => import(`./guides/about-animals-and-plants/fr/root/body/body.md`),
      ),
      guideTags: [`animals`, `plants`],
    },
    raw: null,
  },
  {
    sourceLocation: `content/guides/about-animals.en.md`,
    collection: `guides`,
    slug: `about-animals`,
    locale: `en`,
    props: {
      title: `About animals`,
      Body: loadMarkdown(
        () => import(`./guides/about-animals/en/root/body/body.md`),
      ),
      guideTags: [`animals`],
    },
    raw: null,
  },
  {
    sourceLocation: `content/guides/about-animals.fr.md`,
    collection: `guides`,
    slug: `about-animals`,
    locale: `fr`,
    props: {
      title: `\u00C0 propos d'animaux`,
      Body: loadMarkdown(
        () => import(`./guides/about-animals/fr/root/body/body.md`),
      ),
      guideTags: [`animals`],
    },
    raw: null,
  },
  {
    sourceLocation: `content/guides/about-animals.pt.md`,
    collection: `guides`,
    slug: `about-animals`,
    locale: `pt`,
    props: {
      title: `Sobre animais`,
      Body: loadMarkdown(
        () => import(`./guides/about-animals/pt/root/body/body.md`),
      ),
      guideTags: [`animals`],
    },
    raw: null,
  },
  {
    sourceLocation: `content/guides/about-plants.en.md`,
    collection: `guides`,
    slug: `about-plants`,
    locale: `en`,
    props: {
      title: `About plants`,
      Body: loadMarkdown(
        () => import(`./guides/about-plants/en/root/body/body.md`),
      ),
      guideTags: [`plants`],
    },
    raw: null,
  },
  {
    sourceLocation: `content/guides/about-plants.fr.md`,
    collection: `guides`,
    slug: `about-plants`,
    locale: `fr`,
    props: {
      title: `\u00C0 propos des plantes`,
      Body: loadMarkdown(
        () => import(`./guides/about-plants/fr/root/body/body.md`),
      ),
      guideTags: [`plants`],
    },
    raw: null,
  },
  {
    sourceLocation: `content/guides/about-plants.pt.md`,
    collection: `guides`,
    slug: `about-plants`,
    locale: `pt`,
    props: {
      title: `Sobre plantas`,
      Body: loadMarkdown(
        () => import(`./guides/about-plants/pt/root/body/body.md`),
      ),
      guideTags: [`plants`],
    },
    raw: null,
  },
  {
    sourceLocation: `content/pages/rich-text-example.en.md`,
    collection: `pages`,
    slug: `rich-text-example`,
    locale: `en`,
    props: {
      title: `Rich text example`,
      Body: loadMarkdown(
        () => import(`./pages/rich-text-example/en/root/body/body.md`),
      ),
    },
    raw: null,
  },
  {
    sourceLocation: `content/pages/rich-text-example.fr.md`,
    collection: `pages`,
    slug: `rich-text-example`,
    locale: `fr`,
    props: {
      title: `Exemple de texte riche`,
      Body: loadMarkdown(
        () => import(`./pages/rich-text-example/fr/root/body/body.md`),
      ),
    },
    raw: null,
  },
  {
    sourceLocation: `content/questionnaires/questionnaire-1.en.md`,
    collection: `questionnaires`,
    slug: `questionnaire-1`,
    locale: `en`,
    props: {
      title: `Questionnaire 1`,
      Prologue: loadMarkdown(
        () =>
          import(
            `./questionnaires/questionnaire-1/en/root/prologue/prologue.md`
          ),
      ),
      Epilogue: loadMarkdown(
        () =>
          import(
            `./questionnaires/questionnaire-1/en/root/epilogue/epilogue.md`
          ),
      ),
      items: [
        {
          title: `First name`,
          Description: loadMarkdown(
            () =>
              import(
                `./questionnaires/questionnaire-1/en/root/items/items/0/items-child/description/description.md`
              ),
          ),
        },
        {
          title: `Last Name`,
          Description: loadMarkdown(
            () =>
              import(
                `./questionnaires/questionnaire-1/en/root/items/items/1/items-child/description/description.md`
              ),
          ),
        },
      ],
    },
    raw: null,
  },
  {
    sourceLocation: `content/questionnaires/questionnaire-1.fr.md`,
    collection: `questionnaires`,
    slug: `questionnaire-1`,
    locale: `fr`,
    props: {
      title: `Questionnaire 1`,
      Prologue: loadMarkdown(
        () =>
          import(
            `./questionnaires/questionnaire-1/fr/root/prologue/prologue.md`
          ),
      ),
      Epilogue: loadMarkdown(
        () =>
          import(
            `./questionnaires/questionnaire-1/fr/root/epilogue/epilogue.md`
          ),
      ),
      items: [
        {
          title: `Pr\u00E9nom`,
          Description: loadMarkdown(
            () =>
              import(
                `./questionnaires/questionnaire-1/fr/root/items/items/0/items-child/description/description.md`
              ),
          ),
        },
        {
          title: `Nom de famille`,
          Description: loadMarkdown(
            () =>
              import(
                `./questionnaires/questionnaire-1/fr/root/items/items/1/items-child/description/description.md`
              ),
          ),
        },
      ],
    },
    raw: null,
  },
  {
    sourceLocation: `content/translations/interactions.yml`,
    collection: `translations`,
    slug: `interactions`,
    locale: `en`,
    props: {
      welcome: `Welcome!`,
      Error: loadMarkdown(
        () => import(`./translations/interactions/en/en/error/error.md`),
      ),
      Success: loadMarkdown(
        () => import(`./translations/interactions/en/en/success/success.md`),
      ),
    },
    raw: null,
  },
  {
    sourceLocation: `content/translations/interactions.yml`,
    collection: `translations`,
    slug: `interactions`,
    locale: `fr`,
    props: {
      welcome: `Bienvenue !`,
      Error: loadMarkdown(
        () => import(`./translations/interactions/fr/fr/error/error.md`),
      ),
      Success: loadMarkdown(
        () => import(`./translations/interactions/fr/fr/success/success.md`),
      ),
    },
    raw: null,
  },
  {
    sourceLocation: `content/translations/interactions.yml`,
    collection: `translations`,
    slug: `interactions`,
    locale: `pt`,
    props: {
      welcome: `Welcome!`,
      Error: loadMarkdown(
        () => import(`./translations/interactions/pt/pt/error/error.md`),
      ),
      Success: loadMarkdown(
        () => import(`./translations/interactions/pt/pt/success/success.md`),
      ),
    },
    raw: null,
  },
  {
    sourceLocation: `content/translations/site.yml`,
    collection: `translations`,
    slug: `site`,
    locale: `en`,
    props: {
      name: `Official Netlify CMS Toolkit Website`,
      shortName: `ONCTK-EN`,
      url: `http://localhost:3000`,
    },
    raw: null,
  },
  {
    sourceLocation: `content/translations/site.yml`,
    collection: `translations`,
    slug: `site`,
    locale: `fr`,
    props: {
      name: `Site web officiel Netlify CMS Toolkit`,
      shortName: `ONCTK-FR`,
      url: `http://localhost:3000`,
    },
    raw: null,
  },
  {
    sourceLocation: `content/translations/site.yml`,
    collection: `translations`,
    slug: `site`,
    locale: `pt`,
    props: { url: `http://localhost:3000` },
    raw: null,
  },
] as const;

export type Content = typeof contents[number];

const isRecord = (input: unknown): input is Record<string, unknown> =>
  typeof input === `object` && input !== null;

type AbstractContent = {
  readonly sourceLocation: string;
  readonly collection: string;
  readonly slug: string;
  readonly locale: null | string;
  readonly props: Record<string, unknown>;
  readonly raw: null | string;
};

type DeepPartial<T> = {
  [P in keyof T]?: DeepPartial<T[P]>;
};

type AbstractFilter<Content extends AbstractContent> = DeepPartial<Content>;

const matchRaw = (filter: unknown, value: unknown): boolean => {
  if (typeof filter === `undefined`) {
    return true;
  }
  if (Array.isArray(filter)) {
    if (!Array.isArray(value)) {
      return false;
    }
    if (filter.length !== value.length) {
      return false;
    }
    for (let k = 0; k < filter.length; k++) {
      if (!matchRaw(filter[k], value[k])) {
        return false;
      }
    }
    return true;
  }
  if (isRecord(filter)) {
    if (!isRecord(value)) {
      return false;
    }
    for (const key of Object.keys(filter)) {
      if (!matchRaw(filter[key], value[key])) {
        return false;
      }
    }
    return true;
  }
  return filter === value;
};

const match =
  <Content extends AbstractContent, Filter extends AbstractFilter<Content>>(
    filter: Filter,
  ) =>
  (content: Content): content is Extract<Content, Filter> =>
    matchRaw(filter, content);

type FindAllContents<Content extends AbstractContent> = <
  Filter extends AbstractFilter<Content>,
>(
  filter: Filter,
) => Extract<Content, Filter>[];

type FindUniqueContent<Content extends AbstractContent> = <
  Filter extends AbstractFilter<Content>,
>(
  filter: Filter,
) => Extract<Content, Filter>;

type Runtime<Content extends AbstractContent> = {
  readonly findAll: FindAllContents<Content>;
  readonly findUnique: FindUniqueContent<Content>;
};

const createRuntime = <Content extends AbstractContent>(
  contents: readonly Content[],
): Runtime<Content> => {
  const findAll: FindAllContents<Content> = <
    Filter extends AbstractFilter<Content>,
  >(
    filter: Filter,
  ) => {
    const matchFilter = match<Content, Filter>(filter);
    return contents.filter(matchFilter);
  };

  const findUnique: FindUniqueContent<Content> = <
    Filter extends AbstractFilter<Content>,
  >(
    filter: Filter,
  ) => {
    const allContents = findAll(filter);
    if (allContents.length === 0) {
      throw new Error(`Content not found`);
    }
    if (allContents.length > 1) {
      throw new Error(`Multiple contents found`);
    }
    return allContents[0];
  };

  return {
    findAll,
    findUnique,
  };
};

const runtime = createRuntime(contents);

export const findAll = runtime.findAll;
export const findUnique = runtime.findUnique;
